name: Train and Deploy Faces Model

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Checkout del código
    - uses: actions/checkout@v3
    
    # Paso 2: Configuración de Python
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'  # Habilita caché para pip
        
    # Paso 3: Instalación de dependencias del sistema
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          python3-pip \
          libjpeg-dev \
          zlib1g-dev
        
    # Paso 4: Instalación de dependencias de Python
    - name: Install Python dependencies
      env:
        TF_CPP_MIN_LOG_LEVEL: '2'  # Reduce logs de TensorFlow
      run: |
        python -m pip install --upgrade pip wheel
        pip uninstall tensorflow tensorflow-gpu -y || true  # Limpieza
        pip install --no-cache-dir \
          tensorflow-cpu==2.10.0 \
          gdown \
          -r requirements.txt
        
    # Paso 5: Descarga del dataset
    - name: Download and extract dataset
      run: |
        gdown --id 1SkLkI8bY-2Hw9Cthq2T8hoUwaODdIrb7 -O dataset.tgz
        tar -xzvf dataset.tgz
        rm dataset.tgz
        
    # Paso 6: Entrenamiento del modelo
    - name: Train model (CPU-only)
      env:
        CUDA_VISIBLE_DEVICES: '-1'  # Fuerza uso de CPU
        TF_CPP_MIN_LOG_LEVEL: '2'   # Solo muestra errores
      run: |
        echo "Verificando entorno TensorFlow:"
        python -c "import tensorflow as tf; \
          print(f'TensorFlow {tf.__version__}'); \
          print('GPUs detectadas:', tf.config.list_physical_devices('GPU'))"
        
        echo "Iniciando entrenamiento..."
        python faces_model.py
        
    # Paso 7: Verificación de resultados
    - name: Verify outputs
      run: |
        echo "Estructura de directorios:"
        ls -lR --file-type | grep -v "/$"
        
        echo "\nContenido del modelo:"
        find faces-model/ -type f | head -20
        
    # Paso 8: Despliegue con Docker
    - name: Build and push Docker image
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        MODEL_NAME: ${{ secrets.MODEL_NAME }}
      run: |
        echo "Iniciando sesión en Docker Hub..."
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
        
        echo "Construyendo imagen Docker..."
        docker run -d --name serving_base tensorflow/serving
        docker cp $MODEL_NAME serving_base:/models/$MODEL_NAME
        
        echo "Etiquetando y subiendo imagen..."
        docker commit \
          --change "ENV MODEL_NAME $MODEL_NAME" \
          serving_base \
          $DOCKER_USER/tensorflow-$MODEL_NAME:${{ github.sha }}
          
        docker push $DOCKER_USER/tensorflow-$MODEL_NAME:${{ github.sha }}
        
        echo "Limpieza..."
        docker stop serving_base
        docker rm serving_base
